name: CI

on:
  push:
    branches: [ main ]
  pull_request:

permissions:
  contents: read
  packages: write

jobs:
  test:
    name: Run tests
    runs-on: ubuntu-latest
    env:
      # Use repo-local cache directories to avoid colliding with runner state
      GOMODCACHE: ${{ github.workspace }}/.cache/go/pkg/mod
      GOCACHE:    ${{ github.workspace }}/.cache/go-build
      GO_VERSION: '1.25'
    steps:
      - uses: actions/checkout@v5
      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            .cache/go-build
            .cache/go/pkg/mod
          key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ env.GO_VERSION }}-
            ${{ runner.os }}-go-
      - name: Install test deps
        run: |
          go install github.com/onsi/ginkgo/v2/ginkgo@v2
      - name: Run go vet
        run: go vet ./...
      - name: Run go test
        run: go test ./... -v

  docker-build:
    name: Build and push Docker image to GHCR
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v5
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set image name
        id: image
        run: |
          # compute lowercase owner and repository name for a valid ghcr path
          owner=$(echo "${GITHUB_REPOSITORY%%/*}" | tr '[:upper:]' '[:lower:]')
          repo=$(echo "${GITHUB_REPOSITORY##*/}" | tr '[:upper:]' '[:lower:]')
          echo "image=${owner}/${repo}" >> "$GITHUB_OUTPUT"
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          platforms: linux/amd64,linux/arm64
          cache-from: type=registry,ref=ghcr.io/${{ steps.image.outputs.image }}:buildx-cache
          cache-to: type=registry,ref=ghcr.io/${{ steps.image.outputs.image }}:buildx-cache,mode=max
          # Build using the relocated Dockerfile in the docker/ directory
          file: docker/Dockerfile
          context: .
          tags: |
            ghcr.io/${{ steps.image.outputs.image }}:ci
            ghcr.io/${{ steps.image.outputs.image }}:latest
 
  trivy-scan:
    name: Trivy scan (filesystem + image)
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v5

      - name: Set image name for scan
        run: |
          owner=$(echo "${GITHUB_REPOSITORY%%/*}" | tr '[:upper:]' '[:lower:]')
          repo=$(echo "${GITHUB_REPOSITORY##*/}" | tr '[:upper:]' '[:lower:]')
          echo "IMAGE=ghcr.io/${owner}/${repo}:trivy-scan" >> "$GITHUB_ENV"

      - name: Build docker image for scanning
        run: |
          echo "Building $IMAGE"
          docker build -t "$IMAGE" -f docker/Dockerfile . || true

      - name: Trivy scan filesystem
        uses: aquasecurity/trivy-action@0.33.1
        with:
          scan-type: fs
          format: json
          output: trivy-filesystem.json

      - name: Trivy scan image
        uses: aquasecurity/trivy-action@0.33.1
        with:
          image-ref: ${{ env.IMAGE }}
          format: json
          output: trivy-image.json

      - name: Upload Trivy results
        uses: actions/upload-artifact@v4
        with:
          name: trivy-results
          path: |
            trivy-filesystem.json
            trivy-image.json

